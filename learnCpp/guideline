=================================================================================
This file contains an overall guideline regarding how to go voer the topics here:
=================================================================================

1) Constants (Chapter 2):
- Literals
- Symbolic consts
- constexpr

2) Namespaces (chapter 4):
- C++ introduces the namespace "concept" that allows declaration of two (or more) things" (variables, functions, etc...) with the same name BUT in different namespaces.

3) Global variables (chapter 4):
- Use of global static variable (can be accessed only in file scope).
- Functions by defualt are "defined" with the extern access specifier, so unless they are defined as static, they CAN be accessed outside of the file in which they are defined in.

4) Signed Vs unsigned values (chapter 4):
- Each integral type in C/C++ can store at max its max value. When trying to assgin more to it, a "modulus assginment" takes place.
- Pay attention that when performing arithmetic operations on two integral types, it is prefered to have them both as signed types.
- For loop iterators, on the other hand, it is prefered (usually) to have the type as unsigned.

5) Conversion (chapter 8):
- In C++ there are four types of casting:
- static_cast: The usage of it is, in contrast to "plain old" C-style cast, is that using the static_cast, there is a compile time checking to verify that the pointee is pointed by a "valid" pointer

6) This pointer (chapter 8):
- It is argument 0 that is added to each non static class member function.
- Due to the addition of it, a non static member function can NOT be used as a callback function which its signature was provided.
- It is poiting to the first class member of the object it belongs to. In inheritence use cases, it points to the first class member of the "first" base class.

7) Copy illusion (chapter 9):
- When the compiler "detects" that, for instance, there is a return parameter from a function that is returned by value --> he can levarage the copy
  illusion pattern, that simply put, will eliminate the need to "jump" into the function, and will simply call the object ctor in order to create the object.

8) Copy ctor & assginment operator (chapter 9):
- They both perform similar things, but they are being invoked in different situations
- Copy ctor simply creates a NEW object as a copy of another.
- Assignment operator "copies" the values of some object into an already existing one.

9) Aggragation and composition (chapter 10):
- Two forms to hold ("posses") a class member. 
- In aggragation, note that in the by reference "form", the default ctor is not applicable.

/******************************************************************************

Example to one of the bits and bytes bugs I found during online code review
for one of the employess I had. 
The issue here is that when performing the memcpy in this manner, the first 4
bytes from the byte array will be copied into the enum which is, by defintion
is sizeof(int). Therefor, bytes 1-3 of the array will be "lost".
*******************************************************************************/

#include <stdio.h>
#include <string.h>

enum EsiType 
{
    arbitrary = 0,
    asn20,
    mac,
    ipv4,
    ipv6
};

struct EsiDswp
{
    enum EsiType esiType;
    char EsiValue [9];
};

int main()
{
    printf("main - start\n");
    char mswEsiBuff [10] = {'2', 'f', 'f', 'a', '6', 'e','2', '0', '0', '0'};
    printf("main - initialized mswEsiBuff to:\n");
    for (int i = 0; i < 10; ++i)
    {
        printf("%c\t", mswEsiBuff[i]);
    }
    printf("\n");
    
    printf("main - mswEsiBuff is:%s\n", mswEsiBuff);
    struct EsiDswp esiValDswpFormat = {'0'};
    printf("main - sizeof(esiValDswpFormat.EsiType) is:%d\n", sizeof(esiValDswpFormat.esiType));
    printf("main - initialized struct EsiDswp to:\n");
    printf("esiType:%c\n", esiValDswpFormat.esiType);
    printf("EsiValue:\n");
    for (int i = 0; i < 9; ++i)
    {
        printf("%c\t", esiValDswpFormat.EsiValue[i]);
    }
    
    printf("\n");
    struct EsiDswp esiValDswpFormat2 = {'0'};
    memcpy(&esiValDswpFormat2, mswEsiBuff, 10);
    printf("main - after copying mswEsiBuff into struct esiValDswpFormat2, its content is:\n");
    printf("esiType:%c\n", esiValDswpFormat2.esiType);
    printf("EsiValue:\n");
    for (int i = 0; i < 9; ++i)
    {
        printf("%c\t", esiValDswpFormat2.EsiValue[i]);
    }
    printf("\n");
    printf("main - end\n");
    return 0;
}
